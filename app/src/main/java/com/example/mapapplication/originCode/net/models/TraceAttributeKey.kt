/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models


import com.google.gson.annotations.SerializedName

/**
 * 
 *
 * Values: edgePeriodNames,edgePeriodLength,edgePeriodSpeed,edgePeriodRoad_class,edgePeriodBegin_heading,edgePeriodEnd_heading,edgePeriodBegin_shape_index,edgePeriodEnd_shape_index,edgePeriodTraversability,edgePeriodUse,edgePeriodToll,edgePeriodUnpaved,edgePeriodTunnel,edgePeriodBridge,edgePeriodRoundabout,edgePeriodInternal_intersection,edgePeriodDrive_on_right,edgePeriodSurface,edgePeriodSignPeriodExit_number,edgePeriodSignPeriodExit_branch,edgePeriodSignPeriodExit_toward,edgePeriodSignPeriodExit_name,edgePeriodTravel_mode,edgePeriodVehicle_type,edgePeriodPedestrian_type,edgePeriodBicycle_type,edgePeriodTransit_type,edgePeriodId,edgePeriodWay_id,edgePeriodWeighted_grade,edgePeriodMax_upward_grade,edgePeriodMax_downward_grade,edgePeriodMean_elevation,edgePeriodLane_count,edgePeriodCycle_lane,edgePeriodBicycle_network,edgePeriodSac_scale,edgePeriodSidewalk,edgePeriodDensity,edgePeriodSpeed_limit,edgePeriodTruck_speed,edgePeriodTruck_route,nodePeriodIntersecting_edgePeriodBegin_heading,nodePeriodIntersecting_edgePeriodFrom_edge_name_consistency,nodePeriodIntersecting_edgePeriodTo_edge_name_consistency,nodePeriodIntersecting_edgePeriodDriveability,nodePeriodIntersecting_edgePeriodCyclability,nodePeriodIntersecting_edgePeriodWalkability,nodePeriodIntersecting_edgePeriodUse,nodePeriodIntersecting_edgePeriodRoad_class,nodePeriodElapsed_time,nodePeriodAdmin_index,nodePeriodType,nodePeriodFork,nodePeriodTime_zone,osm_changeset,shape,adminPeriodCountry_code,adminPeriodCountry_text,adminPeriodState_code,adminPeriodState_text,matchedPeriodPoint,matchedPeriodType,matchedPeriodEdge_index,matchedPeriodBegin_route_discontinuity,matchedPeriodEnd_route_discontinuity,matchedPeriodDistance_along_edge,matchedPeriodDistance_from_trace_point
 */

enum class TraceAttributeKey(val value: kotlin.String) {

    @SerializedName(value = "edge.names")
    edgePeriodNames("edge.names"),

    @SerializedName(value = "edge.length")
    edgePeriodLength("edge.length"),

    @SerializedName(value = "edge.speed")
    edgePeriodSpeed("edge.speed"),

    @SerializedName(value = "edge.road_class")
    edgePeriodRoad_class("edge.road_class"),

    @SerializedName(value = "edge.begin_heading")
    edgePeriodBegin_heading("edge.begin_heading"),

    @SerializedName(value = "edge.end_heading")
    edgePeriodEnd_heading("edge.end_heading"),

    @SerializedName(value = "edge.begin_shape_index")
    edgePeriodBegin_shape_index("edge.begin_shape_index"),

    @SerializedName(value = "edge.end_shape_index")
    edgePeriodEnd_shape_index("edge.end_shape_index"),

    @SerializedName(value = "edge.traversability")
    edgePeriodTraversability("edge.traversability"),

    @SerializedName(value = "edge.use")
    edgePeriodUse("edge.use"),

    @SerializedName(value = "edge.toll")
    edgePeriodToll("edge.toll"),

    @SerializedName(value = "edge.unpaved")
    edgePeriodUnpaved("edge.unpaved"),

    @SerializedName(value = "edge.tunnel")
    edgePeriodTunnel("edge.tunnel"),

    @SerializedName(value = "edge.bridge")
    edgePeriodBridge("edge.bridge"),

    @SerializedName(value = "edge.roundabout")
    edgePeriodRoundabout("edge.roundabout"),

    @SerializedName(value = "edge.internal_intersection")
    edgePeriodInternal_intersection("edge.internal_intersection"),

    @SerializedName(value = "edge.drive_on_right")
    edgePeriodDrive_on_right("edge.drive_on_right"),

    @SerializedName(value = "edge.surface")
    edgePeriodSurface("edge.surface"),

    @SerializedName(value = "edge.sign.exit_number")
    edgePeriodSignPeriodExit_number("edge.sign.exit_number"),

    @SerializedName(value = "edge.sign.exit_branch")
    edgePeriodSignPeriodExit_branch("edge.sign.exit_branch"),

    @SerializedName(value = "edge.sign.exit_toward")
    edgePeriodSignPeriodExit_toward("edge.sign.exit_toward"),

    @SerializedName(value = "edge.sign.exit_name")
    edgePeriodSignPeriodExit_name("edge.sign.exit_name"),

    @SerializedName(value = "edge.travel_mode")
    edgePeriodTravel_mode("edge.travel_mode"),

    @SerializedName(value = "edge.vehicle_type")
    edgePeriodVehicle_type("edge.vehicle_type"),

    @SerializedName(value = "edge.pedestrian_type")
    edgePeriodPedestrian_type("edge.pedestrian_type"),

    @SerializedName(value = "edge.bicycle_type")
    edgePeriodBicycle_type("edge.bicycle_type"),

    @SerializedName(value = "edge.transit_type")
    edgePeriodTransit_type("edge.transit_type"),

    @SerializedName(value = "edge.id")
    edgePeriodId("edge.id"),

    @SerializedName(value = "edge.way_id")
    edgePeriodWay_id("edge.way_id"),

    @SerializedName(value = "edge.weighted_grade")
    edgePeriodWeighted_grade("edge.weighted_grade"),

    @SerializedName(value = "edge.max_upward_grade")
    edgePeriodMax_upward_grade("edge.max_upward_grade"),

    @SerializedName(value = "edge.max_downward_grade")
    edgePeriodMax_downward_grade("edge.max_downward_grade"),

    @SerializedName(value = "edge.mean_elevation")
    edgePeriodMean_elevation("edge.mean_elevation"),

    @SerializedName(value = "edge.lane_count")
    edgePeriodLane_count("edge.lane_count"),

    @SerializedName(value = "edge.cycle_lane")
    edgePeriodCycle_lane("edge.cycle_lane"),

    @SerializedName(value = "edge.bicycle_network")
    edgePeriodBicycle_network("edge.bicycle_network"),

    @SerializedName(value = "edge.sac_scale")
    edgePeriodSac_scale("edge.sac_scale"),

    @SerializedName(value = "edge.sidewalk")
    edgePeriodSidewalk("edge.sidewalk"),

    @SerializedName(value = "edge.density")
    edgePeriodDensity("edge.density"),

    @SerializedName(value = "edge.speed_limit")
    edgePeriodSpeed_limit("edge.speed_limit"),

    @SerializedName(value = "edge.truck_speed")
    edgePeriodTruck_speed("edge.truck_speed"),

    @SerializedName(value = "edge.truck_route")
    edgePeriodTruck_route("edge.truck_route"),

    @SerializedName(value = "node.intersecting_edge.begin_heading")
    nodePeriodIntersecting_edgePeriodBegin_heading("node.intersecting_edge.begin_heading"),

    @SerializedName(value = "node.intersecting_edge.from_edge_name_consistency")
    nodePeriodIntersecting_edgePeriodFrom_edge_name_consistency("node.intersecting_edge.from_edge_name_consistency"),

    @SerializedName(value = "node.intersecting_edge.to_edge_name_consistency")
    nodePeriodIntersecting_edgePeriodTo_edge_name_consistency("node.intersecting_edge.to_edge_name_consistency"),

    @SerializedName(value = "node.intersecting_edge.driveability")
    nodePeriodIntersecting_edgePeriodDriveability("node.intersecting_edge.driveability"),

    @SerializedName(value = "node.intersecting_edge.cyclability")
    nodePeriodIntersecting_edgePeriodCyclability("node.intersecting_edge.cyclability"),

    @SerializedName(value = "node.intersecting_edge.walkability")
    nodePeriodIntersecting_edgePeriodWalkability("node.intersecting_edge.walkability"),

    @SerializedName(value = "node.intersecting_edge.use")
    nodePeriodIntersecting_edgePeriodUse("node.intersecting_edge.use"),

    @SerializedName(value = "node.intersecting_edge.road_class")
    nodePeriodIntersecting_edgePeriodRoad_class("node.intersecting_edge.road_class"),

    @SerializedName(value = "node.elapsed_time")
    nodePeriodElapsed_time("node.elapsed_time"),

    @SerializedName(value = "node.admin_index")
    nodePeriodAdmin_index("node.admin_index"),

    @SerializedName(value = "node.type")
    nodePeriodType("node.type"),

    @SerializedName(value = "node.fork")
    nodePeriodFork("node.fork"),

    @SerializedName(value = "node.time_zone")
    nodePeriodTime_zone("node.time_zone"),

    @SerializedName(value = "osm_changeset")
    osm_changeset("osm_changeset"),

    @SerializedName(value = "shape")
    shape("shape"),

    @SerializedName(value = "admin.country_code")
    adminPeriodCountry_code("admin.country_code"),

    @SerializedName(value = "admin.country_text")
    adminPeriodCountry_text("admin.country_text"),

    @SerializedName(value = "admin.state_code")
    adminPeriodState_code("admin.state_code"),

    @SerializedName(value = "admin.state_text")
    adminPeriodState_text("admin.state_text"),

    @SerializedName(value = "matched.point")
    matchedPeriodPoint("matched.point"),

    @SerializedName(value = "matched.type")
    matchedPeriodType("matched.type"),

    @SerializedName(value = "matched.edge_index")
    matchedPeriodEdge_index("matched.edge_index"),

    @SerializedName(value = "matched.begin_route_discontinuity")
    matchedPeriodBegin_route_discontinuity("matched.begin_route_discontinuity"),

    @SerializedName(value = "matched.end_route_discontinuity")
    matchedPeriodEnd_route_discontinuity("matched.end_route_discontinuity"),

    @SerializedName(value = "matched.distance_along_edge")
    matchedPeriodDistance_along_edge("matched.distance_along_edge"),

    @SerializedName(value = "matched.distance_from_trace_point")
    matchedPeriodDistance_from_trace_point("matched.distance_from_trace_point");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TraceAttributeKey) "$data" else null

        /**
         * Returns a valid [TraceAttributeKey] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TraceAttributeKey? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

