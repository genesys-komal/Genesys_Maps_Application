/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models


import com.google.gson.annotations.SerializedName

/**
 * Costing models for determining the most optimal route to take. Note that bikeshare and motorcycle are still in beta. While Valhalla supports multimodal routing, we do not currently process transit data and have excluded it from the list. See https://valhalla.readthedocs.io/en/latest/api/turn-by-turn/api-reference/#costing-models for detailed descriptions of each model.
 *
 * Values: auto,bus,taxi,truck,bicycle,bikeshare,motor_scooter,motorcycle,pedestrian
 */

enum class CostingModel(val value: kotlin.String) {

    @SerializedName(value = "auto")
    auto("auto"),

    @SerializedName(value = "bus")
    bus("bus"),

    @SerializedName(value = "taxi")
    taxi("taxi"),

    @SerializedName(value = "truck")
    truck("truck"),

    @SerializedName(value = "bicycle")
    bicycle("bicycle"),

    @SerializedName(value = "bikeshare")
    bikeshare("bikeshare"),

    @SerializedName(value = "motor_scooter")
    motor_scooter("motor_scooter"),

    @SerializedName(value = "motorcycle")
    motorcycle("motorcycle"),

    @SerializedName(value = "pedestrian")
    pedestrian("pedestrian");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is CostingModel) "$data" else null

        /**
         * Returns a valid [CostingModel] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): CostingModel? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

