/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models


import com.google.gson.annotations.SerializedName

/**
 * 
 *
 * Values: street_intersection,gate,bollard,toll_booth,multi_use_transit_stop,bike_share,parking,motor_way_junction,border_control
 */

enum class NodeType(val value: kotlin.String) {

    @SerializedName(value = "street_intersection")
    street_intersection("street_intersection"),

    @SerializedName(value = "gate")
    gate("gate"),

    @SerializedName(value = "bollard")
    bollard("bollard"),

    @SerializedName(value = "toll_booth")
    toll_booth("toll_booth"),

    @SerializedName(value = "multi_use_transit_stop")
    multi_use_transit_stop("multi_use_transit_stop"),

    @SerializedName(value = "bike_share")
    bike_share("bike_share"),

    @SerializedName(value = "parking")
    parking("parking"),

    @SerializedName(value = "motor_way_junction")
    motor_way_junction("motor_way_junction"),

    @SerializedName(value = "border_control")
    border_control("border_control");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is NodeType) "$data" else null

        /**
         * Returns a valid [NodeType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): NodeType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

