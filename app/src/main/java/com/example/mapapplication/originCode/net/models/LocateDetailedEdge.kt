/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models

import com.example.mapapplication.originCode.net.models.NodeId
import com.example.mapapplication.originCode.net.models.Restrictions
import com.example.mapapplication.originCode.net.models.Speeds
import com.google.gson.annotations.SerializedName

/**
 * 
 *
 * @param sidewalkLeft Is there a sidewalk to the left of the edge?
 * @param sidewalkRight Is there a sidewalk to the right of the edge?
 * @param laneCount 
 * @param stopSign Is there a stop sign at end of the directed edge?
 * @param sacScale 
 * @param yieldSign Is there a yield sign at end of the directed edge?
 * @param notThru Does the edge lead to a \"no-through\" region?
 * @param forward Is the edge info forward? If false, then reverse is implied.
 * @param endNode 
 * @param truckRoute Is the edge part of a truck route/network?
 * @param speeds 
 * @param bikeNetwork Is the edge part of a bicycle network?
 * @param roundAbout Is the edge part of a roundabout?
 * @param trafficSignal Is there a traffic signal at the end of the directed edge?
 * @param accessRestriction Is there a general restriction or access condition?
 * @param destinationOnly Is the edge destination only? If so, it will not be routed through.
 * @param geoAttributes 
 * @param startRestriction 
 * @param cycleLane Indication of the type of cycle lane (if any) present along an edge.
 * @param endRestriction 
 * @param seasonal Is access seasonal (ex. no access in winter)?
 * @param countryCrossing Does the edge cross into a new country?
 * @param partOfComplexRestriction Is the edge part of a complex restriction?
 * @param hasSign Do exit signs exist for the edge?
 * @param access 
 * @param bridge Is the edge part of a bridge?
 * @param classification 
 * @param toll Is the edge part of a toll road?
 * @param tunnel Is the edge part of a tunnel?
 */


data class LocateDetailedEdge (

    /* Is there a sidewalk to the left of the edge? */
    @SerializedName("sidewalk_left")
    val sidewalkLeft: kotlin.Boolean? = null,

    /* Is there a sidewalk to the right of the edge? */
    @SerializedName("sidewalk_right")
    val sidewalkRight: kotlin.Boolean? = null,

    @SerializedName("lane_count")
    val laneCount: kotlin.Int? = null,

    /* Is there a stop sign at end of the directed edge? */
    @SerializedName("stop_sign")
    val stopSign: kotlin.Boolean? = null,

    @SerializedName("sac_scale")
    val sacScale: SacScale? = null,

    /* Is there a yield sign at end of the directed edge? */
    @SerializedName("yield_sign")
    val yieldSign: kotlin.Boolean? = null,

    /* Does the edge lead to a \"no-through\" region? */
    @SerializedName("not_thru")
    val notThru: kotlin.Boolean? = null,

    /* Is the edge info forward? If false, then reverse is implied. */
    @SerializedName("forward")
    val forward: kotlin.Boolean? = null,

    @SerializedName("end_node")
    val endNode: NodeId? = null,

    /* Is the edge part of a truck route/network? */
    @SerializedName("truck_route")
    val truckRoute: kotlin.Boolean? = null,

    @SerializedName("speeds")
    val speeds: Speeds? = null,

    /* Is the edge part of a bicycle network? */
    @SerializedName("bike_network")
    val bikeNetwork: kotlin.Boolean? = null,

    /* Is the edge part of a roundabout? */
    @SerializedName("round_about")
    val roundAbout: kotlin.Boolean? = null,

    /* Is there a traffic signal at the end of the directed edge? */
    @SerializedName("traffic_signal")
    val trafficSignal: kotlin.Boolean? = null,

    /* Is there a general restriction or access condition? */
    @SerializedName("access_restriction")
    val accessRestriction: kotlin.Boolean? = null,

    /* Is the edge destination only? If so, it will not be routed through. */
    @SerializedName("destination_only")
    val destinationOnly: kotlin.Boolean? = null,

    @SerializedName("geo_attributes")
    val geoAttributes: GeoAttributes? = null,

    @SerializedName("start_restriction")
    val startRestriction: Restrictions? = null,

    /* Indication of the type of cycle lane (if any) present along an edge. */
    @SerializedName("cycle_lane")
    val cycleLane: CycleLane? = null,

    @SerializedName("end_restriction")
    val endRestriction: Restrictions? = null,

    /* Is access seasonal (ex. no access in winter)? */
    @SerializedName("seasonal")
    val seasonal: kotlin.Boolean? = null,

    /* Does the edge cross into a new country? */
    @SerializedName("country_crossing")
    val countryCrossing: kotlin.Boolean? = null,

    /* Is the edge part of a complex restriction? */
    @SerializedName("part_of_complex_restriction")
    val partOfComplexRestriction: kotlin.Boolean? = null,

    /* Do exit signs exist for the edge? */
    @SerializedName("has_sign")
    val hasSign: kotlin.Boolean? = null,

    @SerializedName("access")
    val access: Restrictions? = null,

    /* Is the edge part of a bridge? */
    @SerializedName("bridge")
    val bridge: kotlin.Boolean? = null,

    @SerializedName("classification")
    val classification: HighwayClassification? = null,

    /* Is the edge part of a toll road? */
    @SerializedName("toll")
    val toll: kotlin.Boolean? = null,

    /* Is the edge part of a tunnel? */
    @SerializedName("tunnel")
    val tunnel: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: none,hiking,mountain_hiking,demanding_mountain_hiking,alpine_hiking,demanding_alpine_hiking,difficult_alpine_hiking
     */
    enum class SacScale(val value: kotlin.String) {
        @SerializedName(value = "none") none("none"),
        @SerializedName(value = "hiking") hiking("hiking"),
        @SerializedName(value = "mountain hiking") mountain_hiking("mountain hiking"),
        @SerializedName(value = "demanding mountain hiking") demanding_mountain_hiking("demanding mountain hiking"),
        @SerializedName(value = "alpine hiking") alpine_hiking("alpine hiking"),
        @SerializedName(value = "demanding alpine hiking") demanding_alpine_hiking("demanding alpine hiking"),
        @SerializedName(value = "difficult alpine hiking") difficult_alpine_hiking("difficult alpine hiking");
    }
    /**
     * Indication of the type of cycle lane (if any) present along an edge.
     *
     * Values: none,shared,dedicated,separated
     */
    enum class CycleLane(val value: kotlin.String) {
        @SerializedName(value = "none") none("none"),
        @SerializedName(value = "shared") shared("shared"),
        @SerializedName(value = "dedicated") dedicated("dedicated"),
        @SerializedName(value = "separated") separated("separated");
    }
}

