/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models

import com.google.gson.annotations.SerializedName

/**
 * 
 *
 * @param names The name(s) of the road at this edge, if any.
 * @param length The length of this edge in `units`.
 * @param speed The speed of this edge in `units`/hr, in terms of average/free-flow speed for routing purposes. This is affected by any number of factors such as the road service, vehicle type, etc. and not just the posted speed limits.
 * @param roadClass 
 * @param beginHeading The direction at the beginning of an edge. The units are degrees clockwise from north.
 * @param endHeading The direction at the end of an edge. The units are degrees clockwise from north.
 * @param beginShapeIndex Index into the list of shape points for the start of the edge.
 * @param endShapeIndex Index into the list of shape points for the end of the edge.
 * @param traversability 
 * @param use 
 * @param toll True if the edge has a toll.
 * @param unpaved True if the edge has rough payment.
 * @param tunnel True if the edge has a tunnel.
 * @param bridge True if the edge has a bridge.
 * @param roundabout True if the edge has a roundabout.
 * @param internalIntersection True if the edge has an internal intersection.
 * @param driveOnRight True if the edge is in an area where you must drive on the right side of the road.
 * @param surface The type of surface for the edge.
 * @param sign 
 * @param travelMode 
 * @param vehicleType 
 * @param pedestrianType 
 * @param bicycleType 
 * @param transitType 
 * @param id 
 * @param wayId The way identifier of the edge in OSM.
 * @param weightedGrade The weighted grade factor. Valhalla manufactures a weighted grade from elevation data. It is a measure used for hill avoidance in routing - sort of a relative energy use along an edge. But since an edge in Valhalla can possibly go up and down over several hills it might not equate to what you would normally think of as grade.
 * @param maxUpwardGrade The maximum upward slope. A value of 32768 indicates no elevation data is available for this edge.
 * @param maxDownwardGrade The maximum downward slope. A value of 32768 indicates no elevation data is available for this edge.
 * @param meanElevation The mean elevation along the edge. Units are meters by default. If the `units` are specified as miles, then the mean elevation is returned in feet. A value of 32768 indicates no elevation data is available for this edge.
 * @param laneCount The number of lanes for this edge.
 * @param cycleLane The type of cycle lane (if any) along this edge.
 * @param bicycleNetwork The type of bicycle network, if any. This is an integer comprised of constants bitwise or'd together. For example, a route that's part of both a local and mountain network would have a value of 12. 1 - National 2 - Regional 4 - Local 8 - Mountain
 * @param sacScale The difficulty of the hiking trail according to the SAC scale. 0 - No Sac Scale 1 - Hiking 2 - Mountain hiking 3 - Demanding mountain hiking 4 - Alpine hiking 5 - Demanding alpine hiking 6 - Difficult alpine hiking
 * @param sidewalk 
 * @param density 
 * @param speedLimit The speed limit along the edge measured in `units`/hr. This may be either an integer or the string \"unlimited\" if speed limit data is available. If absent, there is no speed limit data available.
 * @param truckSpeed The truck speed of this edge in `units`/hr, in terms of average/free-flow speed for routing purposes. This is affected by any number of factors such as the road service, vehicle type, etc. and not just the posted speed limits.
 * @param truckRoute True if the edge is part of a truck route/network.
 * @param endNode 
 */


data class TraceEdge (

    /* The name(s) of the road at this edge, if any. */
    @SerializedName("names")
    val names: kotlin.collections.List<kotlin.String>? = null,

    /* The length of this edge in `units`. */
    @SerializedName("length")
    val length: kotlin.Double? = null,

    /* The speed of this edge in `units`/hr, in terms of average/free-flow speed for routing purposes. This is affected by any number of factors such as the road service, vehicle type, etc. and not just the posted speed limits. */
    @SerializedName("speed")
    val speed: kotlin.Int? = null,

    @SerializedName("road_class")
    val roadClass: RoadClass? = null,

    /* The direction at the beginning of an edge. The units are degrees clockwise from north. */
    @SerializedName("begin_heading")
    val beginHeading: kotlin.Int? = null,

    /* The direction at the end of an edge. The units are degrees clockwise from north. */
    @SerializedName("end_heading")
    val endHeading: kotlin.Int? = null,

    /* Index into the list of shape points for the start of the edge. */
    @SerializedName("begin_shape_index")
    val beginShapeIndex: kotlin.Int? = null,

    /* Index into the list of shape points for the end of the edge. */
    @SerializedName("end_shape_index")
    val endShapeIndex: kotlin.Int? = null,

    @SerializedName("traversability")
    val traversability: Traversability? = null,

    @SerializedName("use")
    val use: EdgeUse? = null,

    /* True if the edge has a toll. */
    @SerializedName("toll")
    val toll: kotlin.Boolean? = null,

    /* True if the edge has rough payment. */
    @SerializedName("unpaved")
    val unpaved: kotlin.Boolean? = null,

    /* True if the edge has a tunnel. */
    @SerializedName("tunnel")
    val tunnel: kotlin.Boolean? = null,

    /* True if the edge has a bridge. */
    @SerializedName("bridge")
    val bridge: kotlin.Boolean? = null,

    /* True if the edge has a roundabout. */
    @SerializedName("roundabout")
    val roundabout: kotlin.Boolean? = null,

    /* True if the edge has an internal intersection. */
    @SerializedName("internal_intersection")
    val internalIntersection: kotlin.Boolean? = null,

    /* True if the edge is in an area where you must drive on the right side of the road. */
    @SerializedName("drive_on_right")
    val driveOnRight: kotlin.Boolean? = null,

    /* The type of surface for the edge. */
    @SerializedName("surface")
    val surface: Surface? = null,

    @SerializedName("sign")
    val sign: EdgeSign? = null,

    @SerializedName("travel_mode")
    val travelMode: TravelMode? = null,

    @SerializedName("vehicle_type")
    val vehicleType: VehicleType? = null,

    @SerializedName("pedestrian_type")
    val pedestrianType: PedestrianType? = null,

    @SerializedName("bicycle_type")
    val bicycleType: BicycleType? = null,

    @SerializedName("transit_type")
    val transitType: TransitType? = null,

    @SerializedName("id")
    val id: kotlin.Long? = null,

    /* The way identifier of the edge in OSM. */
    @SerializedName("way_id")
    val wayId: kotlin.Long? = null,

    /* The weighted grade factor. Valhalla manufactures a weighted grade from elevation data. It is a measure used for hill avoidance in routing - sort of a relative energy use along an edge. But since an edge in Valhalla can possibly go up and down over several hills it might not equate to what you would normally think of as grade. */
    @SerializedName("weighted_grade")
    val weightedGrade: kotlin.Double? = null,

    /* The maximum upward slope. A value of 32768 indicates no elevation data is available for this edge. */
    @SerializedName("max_upward_grade")
    val maxUpwardGrade: kotlin.Int? = null,

    /* The maximum downward slope. A value of 32768 indicates no elevation data is available for this edge. */
    @SerializedName("max_downward_grade")
    val maxDownwardGrade: kotlin.Int? = null,

    /* The mean elevation along the edge. Units are meters by default. If the `units` are specified as miles, then the mean elevation is returned in feet. A value of 32768 indicates no elevation data is available for this edge. */
    @SerializedName("mean_elevation")
    val meanElevation: kotlin.Int? = null,

    /* The number of lanes for this edge. */
    @SerializedName("lane_count")
    val laneCount: kotlin.Int? = null,

    /* The type of cycle lane (if any) along this edge. */
    @SerializedName("cycle_lane")
    val cycleLane: CycleLane? = null,

    /* The type of bicycle network, if any. This is an integer comprised of constants bitwise or'd together. For example, a route that's part of both a local and mountain network would have a value of 12. 1 - National 2 - Regional 4 - Local 8 - Mountain */
    @SerializedName("bicycle_network")
    val bicycleNetwork: kotlin.Int? = null,

    /* The difficulty of the hiking trail according to the SAC scale. 0 - No Sac Scale 1 - Hiking 2 - Mountain hiking 3 - Demanding mountain hiking 4 - Alpine hiking 5 - Demanding alpine hiking 6 - Difficult alpine hiking */
    @SerializedName("sac_scale")
    val sacScale: kotlin.Int? = null,

    @SerializedName("sidewalk")
    val sidewalk: Sidewalk? = null,

    @SerializedName("density")
    val density: kotlin.Int? = null,

    /* The speed limit along the edge measured in `units`/hr. This may be either an integer or the string \"unlimited\" if speed limit data is available. If absent, there is no speed limit data available. */
    @SerializedName("speed_limit")
    val speedLimit: kotlin.Any? = null,

    /* The truck speed of this edge in `units`/hr, in terms of average/free-flow speed for routing purposes. This is affected by any number of factors such as the road service, vehicle type, etc. and not just the posted speed limits. */
    @SerializedName("truck_speed")
    val truckSpeed: kotlin.Int? = null,

    /* True if the edge is part of a truck route/network. */
    @SerializedName("truck_route")
    val truckRoute: kotlin.Boolean? = null,

    @SerializedName("end_node")
    val endNode: EndNode? = null

) {

    /**
     * The type of surface for the edge.
     *
     * Values: paved_smooth,paved,paved_rough,compacted,dirt,gravel,path,impassable
     */
    enum class Surface(val value: kotlin.String) {
        @SerializedName(value = "paved_smooth") paved_smooth("paved_smooth"),
        @SerializedName(value = "paved") paved("paved"),
        @SerializedName(value = "paved_rough") paved_rough("paved_rough"),
        @SerializedName(value = "compacted") compacted("compacted"),
        @SerializedName(value = "dirt") dirt("dirt"),
        @SerializedName(value = "gravel") gravel("gravel"),
        @SerializedName(value = "path") path("path"),
        @SerializedName(value = "impassable") impassable("impassable");
    }
    /**
     * 
     *
     * Values: car,motorcycle,bus,tractor_trailer
     */
    enum class VehicleType(val value: kotlin.String) {
        @SerializedName(value = "car") car("car"),
        @SerializedName(value = "motorcycle") motorcycle("motorcycle"),
        @SerializedName(value = "bus") bus("bus"),
        @SerializedName(value = "tractor_trailer") tractor_trailer("tractor_trailer");
    }
    /**
     * 
     *
     * Values: foot,wheelchair,segway
     */
    enum class PedestrianType(val value: kotlin.String) {
        @SerializedName(value = "foot") foot("foot"),
        @SerializedName(value = "wheelchair") wheelchair("wheelchair"),
        @SerializedName(value = "segway") segway("segway");
    }
    /**
     * 
     *
     * Values: road,cross,hybrid,mountain
     */
    enum class BicycleType(val value: kotlin.String) {
        @SerializedName(value = "road") road("road"),
        @SerializedName(value = "cross") cross("cross"),
        @SerializedName(value = "hybrid") hybrid("hybrid"),
        @SerializedName(value = "mountain") mountain("mountain");
    }
    /**
     * 
     *
     * Values: tram,metro,rail,bus,ferry,cable_car,gondola,funicular
     */
    enum class TransitType(val value: kotlin.String) {
        @SerializedName(value = "tram") tram("tram"),
        @SerializedName(value = "metro") metro("metro"),
        @SerializedName(value = "rail") rail("rail"),
        @SerializedName(value = "bus") bus("bus"),
        @SerializedName(value = "ferry") ferry("ferry"),
        @SerializedName(value = "cable_car") cable_car("cable_car"),
        @SerializedName(value = "gondola") gondola("gondola"),
        @SerializedName(value = "funicular") funicular("funicular");
    }
    /**
     * The type of cycle lane (if any) along this edge.
     *
     * Values: none,shared,dedicated,separated
     */
    enum class CycleLane(val value: kotlin.String) {
        @SerializedName(value = "none") none("none"),
        @SerializedName(value = "shared") shared("shared"),
        @SerializedName(value = "dedicated") dedicated("dedicated"),
        @SerializedName(value = "separated") separated("separated");
    }
    /**
     * 
     *
     * Values: left,right,both,none
     */
    enum class Sidewalk(val value: kotlin.String) {
        @SerializedName(value = "left") left("left"),
        @SerializedName(value = "right") right("right"),
        @SerializedName(value = "both") both("both"),
        @SerializedName(value = "none") none("none");
    }
}

