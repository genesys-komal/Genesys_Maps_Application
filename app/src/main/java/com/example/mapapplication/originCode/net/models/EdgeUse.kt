/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models


import com.google.gson.annotations.SerializedName

/**
 * The use for the edge.
 *
 * Values: road,ramp,turn_channel,track,driveway,alley,parking_aisle,emergency_access,drive_through,culdesac,living_street,service_road,cycleway,mountain_bike,sidewalk,footway,steps,path,pedestrian,pedestrian_crossing,bridleway,rest_area,service_area,other,ferry,railMinusFerry,rail,bus,egress_connection,platform_connection,transit_connection
 */

enum class EdgeUse(val value: kotlin.String) {

    @SerializedName(value = "road")
    road("road"),

    @SerializedName(value = "ramp")
    ramp("ramp"),

    @SerializedName(value = "turn_channel")
    turn_channel("turn_channel"),

    @SerializedName(value = "track")
    track("track"),

    @SerializedName(value = "driveway")
    driveway("driveway"),

    @SerializedName(value = "alley")
    alley("alley"),

    @SerializedName(value = "parking_aisle")
    parking_aisle("parking_aisle"),

    @SerializedName(value = "emergency_access")
    emergency_access("emergency_access"),

    @SerializedName(value = "drive_through")
    drive_through("drive_through"),

    @SerializedName(value = "culdesac")
    culdesac("culdesac"),

    @SerializedName(value = "living_street")
    living_street("living_street"),

    @SerializedName(value = "service_road")
    service_road("service_road"),

    @SerializedName(value = "cycleway")
    cycleway("cycleway"),

    @SerializedName(value = "mountain_bike")
    mountain_bike("mountain_bike"),

    @SerializedName(value = "sidewalk")
    sidewalk("sidewalk"),

    @SerializedName(value = "footway")
    footway("footway"),

    @SerializedName(value = "steps")
    steps("steps"),

    @SerializedName(value = "path")
    path("path"),

    @SerializedName(value = "pedestrian")
    pedestrian("pedestrian"),

    @SerializedName(value = "pedestrian_crossing")
    pedestrian_crossing("pedestrian_crossing"),

    @SerializedName(value = "bridleway")
    bridleway("bridleway"),

    @SerializedName(value = "rest_area")
    rest_area("rest_area"),

    @SerializedName(value = "service_area")
    service_area("service_area"),

    @SerializedName(value = "other")
    other("other"),

    @SerializedName(value = "ferry")
    ferry("ferry"),

    @SerializedName(value = "rail-ferry")
    railMinusFerry("rail-ferry"),

    @SerializedName(value = "rail")
    rail("rail"),

    @SerializedName(value = "bus")
    bus("bus"),

    @SerializedName(value = "egress_connection")
    egress_connection("egress_connection"),

    @SerializedName(value = "platform_connection")
    platform_connection("platform_connection"),

    @SerializedName(value = "transit_connection")
    transit_connection("transit_connection");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is EdgeUse) "$data" else null

        /**
         * Returns a valid [EdgeUse] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): EdgeUse? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

