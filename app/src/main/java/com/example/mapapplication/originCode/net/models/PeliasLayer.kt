/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models


import com.google.gson.annotations.SerializedName

/**
 * Our database is organized into several layers (in the GIS sense of the term) as follows:  - `venue`: Points of interest, businesses, and things with walls - `address`: Places with a street address - `street`: Streets, roads, highways - `county`: Places that issue passports, nations, nation-states - `macroregion`: A related group of regions (mostly in Europe) - `region`: The first administrative division within a country (usually states and provinces) - `macrocounty`: A related group of counties (mostly in Europe) - `county`: Official governmental areas; usually bigger than a locality, but almost always smaller than a region - `locality`: Towns, hamlets, cities, etc. - `localadmin`: Local administrative boundaries - `borough`: Local administrative boundaries within cities (not widely used, but present in places such as NYC and Mexico City) - `neighbourhood`: Social communities and neighborhoods (note the British spelling in the API!) - `postalcode`: Postal codes used by mail services (note: not used for reverse geocoding) - `coarse`: An alias for simultaneously using all administrative layers (everything except `venue` and `address`) - `marinearea`: Places with fishes and boats. - `ocean`: A really big marine area. 
 *
 * Values: venue,address,street,country,macroregion,region,macrocounty,county,locality,localadmin,borough,neighbourhood,postalcode,coarse,dependency,macrohood,marinearea,disputed,empire,continent,ocean
 */

enum class PeliasLayer(val value: kotlin.String) {

    @SerializedName(value = "venue")
    venue("venue"),

    @SerializedName(value = "address")
    address("address"),

    @SerializedName(value = "street")
    street("street"),

    @SerializedName(value = "country")
    country("country"),

    @SerializedName(value = "macroregion")
    macroregion("macroregion"),

    @SerializedName(value = "region")
    region("region"),

    @SerializedName(value = "macrocounty")
    macrocounty("macrocounty"),

    @SerializedName(value = "county")
    county("county"),

    @SerializedName(value = "locality")
    locality("locality"),

    @SerializedName(value = "localadmin")
    localadmin("localadmin"),

    @SerializedName(value = "borough")
    borough("borough"),

    @SerializedName(value = "neighbourhood")
    neighbourhood("neighbourhood"),

    @SerializedName(value = "postalcode")
    postalcode("postalcode"),

    @SerializedName(value = "coarse")
    coarse("coarse"),

    @SerializedName(value = "dependency")
    dependency("dependency"),

    @SerializedName(value = "macrohood")
    macrohood("macrohood"),

    @SerializedName(value = "marinearea")
    marinearea("marinearea"),

    @SerializedName(value = "disputed")
    disputed("disputed"),

    @SerializedName(value = "empire")
    empire("empire"),

    @SerializedName(value = "continent")
    continent("continent"),

    @SerializedName(value = "ocean")
    ocean("ocean");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is PeliasLayer) "$data" else null

        /**
         * Returns a valid [PeliasLayer] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): PeliasLayer? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

