/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.mapapplication.originCode.net.models


import com.google.gson.annotations.SerializedName

/**
 * 
 *
 * @param `internal` Is the edge internal to an intersection?
 * @param link Is the edge a ramp or turn channel?
 * @param surface A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type.
 * @param use 
 * @param classification The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types.
 */


data class HighwayClassification (

    /* Is the edge internal to an intersection? */
    @SerializedName("internal")
    val `internal`: kotlin.Boolean? = null,

    /* Is the edge a ramp or turn channel? */
    @SerializedName("link")
    val link: kotlin.Boolean? = null,

    /* A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type. */
    @SerializedName("surface")
    val surface: Surface? = null,

    @SerializedName("use")
    val use: Use? = null,

    /* The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types. */
    @SerializedName("classification")
    val classification: Classification? = null

) {

    /**
     * A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type.
     *
     * Values: paved_smooth,paved,paved_rough,compacted,dirt,gravel,path,impassable
     */
    enum class Surface(val value: kotlin.String) {
        @SerializedName(value = "paved_smooth") paved_smooth("paved_smooth"),
        @SerializedName(value = "paved") paved("paved"),
        @SerializedName(value = "paved_rough") paved_rough("paved_rough"),
        @SerializedName(value = "compacted") compacted("compacted"),
        @SerializedName(value = "dirt") dirt("dirt"),
        @SerializedName(value = "gravel") gravel("gravel"),
        @SerializedName(value = "path") path("path"),
        @SerializedName(value = "impassable") impassable("impassable");
    }
    /**
     * 
     *
     * Values: road,ramp,turn_channel,track,driveway,alley,parking_aisle,emergency_access,drive_through,culdesac,living_street,service_road,cycleway,mountain_bike,sidewalk,footway,elevator,steps,escalator,path,pedestrian,bridleway,pedestrian_crossing,rest_area,service_area,other,rail,ferry,railMinusFerry,bus,egress_connection,platform_connnection,transit_connection,construction
     */
    enum class Use(val value: kotlin.String) {
        @SerializedName(value = "road") road("road"),
        @SerializedName(value = "ramp") ramp("ramp"),
        @SerializedName(value = "turn_channel") turn_channel("turn_channel"),
        @SerializedName(value = "track") track("track"),
        @SerializedName(value = "driveway") driveway("driveway"),
        @SerializedName(value = "alley") alley("alley"),
        @SerializedName(value = "parking_aisle") parking_aisle("parking_aisle"),
        @SerializedName(value = "emergency_access") emergency_access("emergency_access"),
        @SerializedName(value = "drive_through") drive_through("drive_through"),
        @SerializedName(value = "culdesac") culdesac("culdesac"),
        @SerializedName(value = "living_street") living_street("living_street"),
        @SerializedName(value = "service_road") service_road("service_road"),
        @SerializedName(value = "cycleway") cycleway("cycleway"),
        @SerializedName(value = "mountain_bike") mountain_bike("mountain_bike"),
        @SerializedName(value = "sidewalk") sidewalk("sidewalk"),
        @SerializedName(value = "footway") footway("footway"),
        @SerializedName(value = "elevator") elevator("elevator"),
        @SerializedName(value = "steps") steps("steps"),
        @SerializedName(value = "escalator") escalator("escalator"),
        @SerializedName(value = "path") path("path"),
        @SerializedName(value = "pedestrian") pedestrian("pedestrian"),
        @SerializedName(value = "bridleway") bridleway("bridleway"),
        @SerializedName(value = "pedestrian_crossing") pedestrian_crossing("pedestrian_crossing"),
        @SerializedName(value = "rest_area") rest_area("rest_area"),
        @SerializedName(value = "service_area") service_area("service_area"),
        @SerializedName(value = "other") other("other"),
        @SerializedName(value = "rail") rail("rail"),
        @SerializedName(value = "ferry") ferry("ferry"),
        @SerializedName(value = "rail-ferry") railMinusFerry("rail-ferry"),
        @SerializedName(value = "bus") bus("bus"),
        @SerializedName(value = "egress_connection") egress_connection("egress_connection"),
        @SerializedName(value = "platform_connnection") platform_connnection("platform_connnection"),
        @SerializedName(value = "transit_connection") transit_connection("transit_connection"),
        @SerializedName(value = "construction") construction("construction");
    }
    /**
     * The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types.
     *
     * Values: motorway,trunk,primary,secondary,tertiary,unclassified,residential,service_other
     */
    enum class Classification(val value: kotlin.String) {
        @SerializedName(value = "motorway") motorway("motorway"),
        @SerializedName(value = "trunk") trunk("trunk"),
        @SerializedName(value = "primary") primary("primary"),
        @SerializedName(value = "secondary") secondary("secondary"),
        @SerializedName(value = "tertiary") tertiary("tertiary"),
        @SerializedName(value = "unclassified") unclassified("unclassified"),
        @SerializedName(value = "residential") residential("residential"),
        @SerializedName(value = "service_other") service_other("service_other");
    }
}

