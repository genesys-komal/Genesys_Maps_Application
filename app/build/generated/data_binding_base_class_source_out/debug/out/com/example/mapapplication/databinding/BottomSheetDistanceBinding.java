// Generated by view binder compiler. Do not edit!
package com.example.mapapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mapapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottomSheetDistanceBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView optimalDistance;

  @NonNull
  public final TextView optimalTime;

  @NonNull
  public final TextView shortestDistance;

  @NonNull
  public final TextView shortestTime;

  @NonNull
  public final TextView textView1;

  private BottomSheetDistanceBinding(@NonNull LinearLayout rootView,
      @NonNull TextView optimalDistance, @NonNull TextView optimalTime,
      @NonNull TextView shortestDistance, @NonNull TextView shortestTime,
      @NonNull TextView textView1) {
    this.rootView = rootView;
    this.optimalDistance = optimalDistance;
    this.optimalTime = optimalTime;
    this.shortestDistance = shortestDistance;
    this.shortestTime = shortestTime;
    this.textView1 = textView1;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetDistanceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetDistanceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_distance, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetDistanceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.optimalDistance;
      TextView optimalDistance = ViewBindings.findChildViewById(rootView, id);
      if (optimalDistance == null) {
        break missingId;
      }

      id = R.id.optimalTime;
      TextView optimalTime = ViewBindings.findChildViewById(rootView, id);
      if (optimalTime == null) {
        break missingId;
      }

      id = R.id.shortestDistance;
      TextView shortestDistance = ViewBindings.findChildViewById(rootView, id);
      if (shortestDistance == null) {
        break missingId;
      }

      id = R.id.shortestTime;
      TextView shortestTime = ViewBindings.findChildViewById(rootView, id);
      if (shortestTime == null) {
        break missingId;
      }

      id = R.id.textView1;
      TextView textView1 = ViewBindings.findChildViewById(rootView, id);
      if (textView1 == null) {
        break missingId;
      }

      return new BottomSheetDistanceBinding((LinearLayout) rootView, optimalDistance, optimalTime,
          shortestDistance, shortestTime, textView1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
