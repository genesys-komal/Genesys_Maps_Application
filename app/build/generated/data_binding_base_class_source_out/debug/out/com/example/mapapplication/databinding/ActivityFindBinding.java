// Generated by view binder compiler. Do not edit!
package com.example.mapapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mapapplication.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.mapbox.mapboxsdk.maps.MapView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFindBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView backToTurn;

  @NonNull
  public final FloatingActionButton clearPoints;

  @NonNull
  public final AppCompatImageView clearText;

  @NonNull
  public final ConstraintLayout container;

  @NonNull
  public final LinearLayout containerSearch;

  @NonNull
  public final FrameLayout containerStart;

  @NonNull
  public final EditText editTextStart;

  @NonNull
  public final MapView mapView;

  @NonNull
  public final RecyclerView recyclerViewSearch;

  @NonNull
  public final Button startRouteButton;

  @NonNull
  public final LinearLayout startRouteLayout;

  private ActivityFindBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView backToTurn,
      @NonNull FloatingActionButton clearPoints, @NonNull AppCompatImageView clearText,
      @NonNull ConstraintLayout container, @NonNull LinearLayout containerSearch,
      @NonNull FrameLayout containerStart, @NonNull EditText editTextStart,
      @NonNull MapView mapView, @NonNull RecyclerView recyclerViewSearch,
      @NonNull Button startRouteButton, @NonNull LinearLayout startRouteLayout) {
    this.rootView = rootView;
    this.backToTurn = backToTurn;
    this.clearPoints = clearPoints;
    this.clearText = clearText;
    this.container = container;
    this.containerSearch = containerSearch;
    this.containerStart = containerStart;
    this.editTextStart = editTextStart;
    this.mapView = mapView;
    this.recyclerViewSearch = recyclerViewSearch;
    this.startRouteButton = startRouteButton;
    this.startRouteLayout = startRouteLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFindBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFindBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_find, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFindBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backToTurn;
      ImageView backToTurn = ViewBindings.findChildViewById(rootView, id);
      if (backToTurn == null) {
        break missingId;
      }

      id = R.id.clearPoints;
      FloatingActionButton clearPoints = ViewBindings.findChildViewById(rootView, id);
      if (clearPoints == null) {
        break missingId;
      }

      id = R.id.clearText;
      AppCompatImageView clearText = ViewBindings.findChildViewById(rootView, id);
      if (clearText == null) {
        break missingId;
      }

      ConstraintLayout container = (ConstraintLayout) rootView;

      id = R.id.container_search;
      LinearLayout containerSearch = ViewBindings.findChildViewById(rootView, id);
      if (containerSearch == null) {
        break missingId;
      }

      id = R.id.container_start;
      FrameLayout containerStart = ViewBindings.findChildViewById(rootView, id);
      if (containerStart == null) {
        break missingId;
      }

      id = R.id.edit_text_start;
      EditText editTextStart = ViewBindings.findChildViewById(rootView, id);
      if (editTextStart == null) {
        break missingId;
      }

      id = R.id.mapView;
      MapView mapView = ViewBindings.findChildViewById(rootView, id);
      if (mapView == null) {
        break missingId;
      }

      id = R.id.recycler_view_search;
      RecyclerView recyclerViewSearch = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewSearch == null) {
        break missingId;
      }

      id = R.id.startRouteButton;
      Button startRouteButton = ViewBindings.findChildViewById(rootView, id);
      if (startRouteButton == null) {
        break missingId;
      }

      id = R.id.startRouteLayout;
      LinearLayout startRouteLayout = ViewBindings.findChildViewById(rootView, id);
      if (startRouteLayout == null) {
        break missingId;
      }

      return new ActivityFindBinding((ConstraintLayout) rootView, backToTurn, clearPoints,
          clearText, container, containerSearch, containerStart, editTextStart, mapView,
          recyclerViewSearch, startRouteButton, startRouteLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
